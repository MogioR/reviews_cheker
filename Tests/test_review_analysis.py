import os
import sys

sys.path.append(os.path.dirname(os.path.dirname(os.path.realpath(__file__))))

from Modules.review_analysis import ReviewAnalysis


class TestReviewAnalysis:
    def setup_class(self):
        self.a = ReviewAnalysis()

    def test_is_spoiling(self):
        # English review
        assert self.a.is_spoiling('Maria is a great tutor. She can hear everything and speak very '
                                  'well with her students, which means that she will always be clear '
                                  'well with her students, which means that she will always be clear '
                                  'well with her students, which means that she will always be clear '
                                  'well with her students, which means that she will always be clear '
                                  'well with her students, which means that she will always be clear '
                                  'of your wrongs in English language!') is True

        # Short review
        assert self.a.is_spoiling('В общем рекомендую этого преподавателя всем кто хочет подтянуть свой '
                                  'уровен') is True

        # Wrong end of review
        assert self.a.is_spoiling('Елена Владимировна - приятный в общении человек. Педагог помогает мне '
                                  'повысить уровень владения английским языком, использует много различных '
                                  'учебных и методических материалов на занятиях с ней по подготовке к '
                                  'ЕГЭ IELTS TOEFL c упором именно как раз-таки конкретно разговорной речи '
                                  '(чтение). Занятия проходят очень продуктивно! Упор идет больше не только '
                                  'лишь собственно непосредственно on line-, но также комбинированно '
                                  'используется аудиоуроками весь материал для занятий подобран '
                                  'квалифицированным специалистом весьма грамотно согласно моему запросу :)') is True
        # Black words
        assert self.a.is_spoiling('Хороший преподаватель со своим индивидуальным стилем преподавания материала '
                                  'ребенку 5 класса средней общеобразовательной английской программы второго '
                                  'поколения от компании "Ваш Репетитор".') is True

        # Normal end, some english words
        assert self.a.is_spoiling('Khan Faisal - отличный преподаватель, мне с ним очень комфортно работать! '
                                  'Он помогает подтянуть уровень владения английским языком и в целом у меня '
                                  'положительный отзыв о его работе. У репетитора есть своя методика '
                                  'обучения английскому языку на основе бизнес-лексики по учебникам '
                                  'McDonalds или Tivari Rupa suite. В основном мы занимаемся разговорной '
                                  'практикой для расширения кругозора, но также много времени уделяем '
                                  'грамматике языка (грамматика нам не нужна). Если возникают какие либо '
                                  'вопросы связанные со здоровьем то я всегда обращаюсь к нему за помощью!') is False

        # Russian review
        assert self.a.is_spoiling('Мне очень нравится заниматься с Еленой Игоревной. Она хорошо преподает '
                                  'английский язык, доступно и понятно объясняет материал по предмету! Я уже '
                                  'значительно лучше стала знать грамматику языка благодаря занятиям со '
                                  'специалистом-носителем английского. Елена - доброжелательный человек, '
                                  'который всегда идет навстречу моим пожеланиям в плане графика '
                                  'проведения занятий или их продолжительности (для меня это имеет '
                                  'значение).') is False

    def test_check_end_of_sentence(self):
        # True end of sentence
        assert self.a.check_end_of_sentence('Sentence.') is True
        assert self.a.check_end_of_sentence('Sentence..') is True
        assert self.a.check_end_of_sentence('Sentence...') is True
        assert self.a.check_end_of_sentence('Sentence....') is True
        assert self.a.check_end_of_sentence('Sentence!') is True
        assert self.a.check_end_of_sentence('Sentence!!') is True
        assert self.a.check_end_of_sentence('Sentence!!!') is True
        assert self.a.check_end_of_sentence('Sentence!!!!') is True

        # False end of sentence
        assert self.a.check_end_of_sentence('Sentence') is False
        assert self.a.check_end_of_sentence('Sentence!.') is False
        assert self.a.check_end_of_sentence('Sentence.!') is False
        assert self.a.check_end_of_sentence('Sentence.....') is False
        assert self.a.check_end_of_sentence('Sentence!.!!') is False
        assert self.a.check_end_of_sentence('Sentence!..') is False

    def test_correct_review(self):
        # Normal review is equal
        assert self.a.correct_review('Елена Владимировна нам подошла полностью как со стороны профессиональных '
                                     'качеств так личностных характеристик преподавателя английского языка Елены '
                                     'Владимировны Багаевой к ребенку 5 класса начальной школы города Москвы.') == \
               'Елена Владимировна нам подошла полностью как со стороны профессиональных качеств так личностных ' \
               'характеристик преподавателя английского языка Елены Владимировны Багаевой к ребенку 5 класса ' \
               'начальной школы города Москвы.'

        # Cut before point in not ended
        assert self.a.correct_review('Елена Владимировна нам подошла полностью как со стороны профессиональных '
                                     'качеств так личностных характеристик преподавателя английского языка Елены '
                                     'Владимировны Багаевой. К ребенку 5 класса начальной школы города Москвы') == \
               'Елена Владимировна нам подошла полностью как со стороны профессиональных качеств так личностных ' \
               'характеристик преподавателя английского языка Елены Владимировны Багаевой.'

        # Del english full
        assert self.a.correct_review('Maria is a great tutor She can hear everything and speak very '
                                     'well with her students which means that she will always be clear '
                                     'well with her students which means that she will always be clear '
                                     'well with her students which means that she will always be clear '
                                     'well with her students which means that she will always be clear '
                                     'well with her students which means that she will always be clear '
                                     'of your wrongs in English language') == ''

        # Del english parts
        assert self.a.correct_review('Khan Faisal - отличный преподаватель, мне с ним очень комфортно работать! '
                                     'Он помогает подтянуть уровень владения английским языком и в целом у меня '
                                     'положительный отзыв о его работе. У репетитора есть своя методика '
                                     'обучения английскому языку на основе бизнес-лексики по учебникам '
                                     'McDonalds или Tivari Rupa suite. В основном мы занимаемся разговорной '
                                     'практикой для расширения кругозора, но также много времени уделяем '
                                     'грамматике языка (грамматика нам не нужна). Если возникают какие либо '
                                     'вопросы связанные со здоровьем то я всегда обращаюсь к нему за помощью!') == \
               '- отличный преподаватель, мне с ним очень комфортно работать! Он помогает подтянуть уровень владения ' \
               'английским языком и в целом у меня положительный отзыв о его работе. У репетитора есть своя методика ' \
               'обучения английскому языку на основе бизнес-лексики по учебникам  или   . В основном мы занимаемся ' \
               'разговорной практикой для расширения кругозора, но также много времени уделяем грамматике языка ' \
               '(грамматика нам не нужна). Если возникают какие либо вопросы связанные со здоровьем то я всегда ' \
               'обращаюсь к нему за помощью!'

    def test_has_name_in_start(self):
        # Russian name
        assert self.a.has_name_in_start('Елена Владимировна - подошла полностью как со стороны '
                                        'профессиональных качеств так личностных характеристик преподавателя '
                                        'английского языка Елены Владимировны Багаевой к ребенку 5 класса '
                                        'начальной школы города Москвы.') is True

        # English name
        assert self.a.has_name_in_start('John Alexander - отличный преподаватель английского языка. С ним '
                                        'интересно заниматься, он дает много информации по предмету грамотно '
                                        'строит уроки в зависимости от уровня ученика (грамматика или '
                                        'аудирование). Уроки проходят легко для восприятия на слух без '
                                        'лишних напоминаний о правилах грамматики!') is True
        # Nothing
        assert self.a.has_name_in_start('Мне очень нравится заниматься с Еленой Игоревной. Она хорошо '
                                        'преподает английский язык, доступно и понятно объясняет материал по '
                                        'предмету! Я уже значительно лучше стала знать грамматику языка '
                                        'благодаря занятиям со специалистом-носителем английского. Елена - '
                                        'доброжелательный человек, который всегда идет навстречу моим '
                                        'пожеланиям в плане графика проведения занятий или их '
                                        'продолжительности (для меня это имеет значение).') is False

    def test_delete_name_in_start(self):
        # Russian name
        assert self.a.delete_name_in_start('Елена Владимировна - подошла полностью как со стороны профессиональных '
                                           'качеств так личностных характеристик преподавателя английского языка '
                                           'Елены Владимировны Багаевой к ребенку 5 класса начальной '
                                           'школы города Москвы.') == \
               'Подошла полностью как со стороны профессиональных качеств так личностных ' \
               'характеристик преподавателя английского языка Елены Владимировны ' \
               'Багаевой к ребенку 5 класса начальной школы города Москвы.'

        # English name
        assert self.a.delete_name_in_start('John Alexander - отличный преподаватель английского языка. С ним '
                                           'интересно заниматься, он дает много информации по предмету грамотно '
                                           'строит уроки в зависимости от уровня ученика (грамматика или '
                                           'аудирование). Уроки проходят легко для восприятия на слух без '
                                           'лишних напоминаний о правилах грамматики!') == \
               'Отличный преподаватель английского языка. С ним интересно заниматься, ' \
               'он дает много информации по предмету грамотно строит уроки в зависимости ' \
               'от уровня ученика (грамматика или аудирование). Уроки проходят легко для ' \
               'восприятия на слух без лишних напоминаний о правилах грамматики!'

    def test_clean_review(self):
        # Russian review
        assert self.a.clean_review('Елена Владимировна - подошла полностью как со стороны профессиональных качеств '
                                   'так личностных характеристик преподавателя английского языка Елены Владимировны '
                                   'Багаевой к ребенку 5 класса начальной школы города Москвы.') == \
               'елена владимировна подошла полностью стороны профессиональных качеств личностных характеристик ' \
               'преподавателя английского языка елены владимировны багаевой ребенку класса начальной школы города ' \
               'москвы'

        # With english review
        assert self.a.clean_review('Преподаватель мне очень нравится. Она быстро нашла подход к ребенку, '
                                   'она внимательная и ответственная во всем! У нее есть раздаточный материал по '
                                   'английскому языку - это карточки для маленьких детей с надписями на английском '
                                   'языке или специальные рисунки-картинки в виде животных (наподобие гусей), '
                                   'различные наклейщики от Elementary до Intermediate проходят регулярно уроки '
                                   'английского языка у Марии Александровны. Впечатление о ее работе только '
                                   'положительное могу сказать потому что дочка сейчас начала '
                                   'получать оценки "4", а ранее была тройка!') == \
               'преподаватель нравится быстро нашла подход ребенку внимательная ответственная раздаточный материал ' \
               'английскому языку карточки маленьких детей надписями английском языке специальные рисунки картинки ' \
               'виде животных наподобие гусей различные наклейщики проходят регулярно уроки английского языка марии ' \
               'александровны впечатление работе положительное могу дочка получать оценки ранее тройка'

    def test_lemmatization_review(self):
        # Russian review
        assert self.a.lemmatization_review('елена владимировна подошла полностью стороны профессиональных качеств '
                                           'личностных характеристик преподавателя английского языка елены '
                                           'владимировны багаевой ребенку класса начальной школы города москвы') == \
               'елена владимирович подойти полностью сторона профессиональный качество личностный характеристика ' \
               'преподаватель английский язык елена владимирович багаев ребенок класс начальный школа город москва'

        # With english review
        assert self.a.lemmatization_review('преподаватель нравится быстро нашла подход ребенку внимательная '
                                           'ответственная раздаточный материал английскому языку карточки маленьких '
                                           'детей надписями английском языке специальные рисунки картинки виде '
                                           'животных наподобие гусей различные наклейщики проходят регулярно уроки '
                                           'английского языка марии александровны впечатление работе положительное '
                                           'могу дочка получать оценки ранее тройка') == \
               'преподаватель нравиться быстро найти подход ребенок внимательный ответственный раздаточный материал ' \
               'английский язык карточка маленький ребенок надпись английский язык специальный рисунок картинка вид ' \
               'животное наподобие гусь различный наклейщик проходить регулярно урок английский язык мария ' \
               'александрович впечатление работа положительный мочь дочка получать оценка ранее тройка'

    def test_get_duble_pairs(self):
        self.a.duplicates_uniqueness = 0.5
        assert self.a.get_duble_pairs([
            [1, 0.3, 0, 0.5],
            [0.3, 1, 0.6, 0],
            [0, 0.6, 1, 0.7],
            [0.5, 0, 0.7, 1],
        ]) == [
                   [0, 3], [1, 2], [2, 3]
               ]

        self.a.duplicates_uniqueness = 0.3
        assert self.a.get_duble_pairs([
            [1, 0.3, 0, 0.5],
            [0.3, 1, 0.6, 0],
            [0, 0.6, 1, 0.7],
            [0.5, 0, 0.7, 1],
        ]) == [
                   [0, 1], [0, 3], [1, 2], [2, 3]
               ]

    def test_get_duplicat_matrix(self):
        lemmatized_reviews = [
            "абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос",
            "абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос",
            "тыква тыква тыква абрикос абрикос абрикос абрикос абрикос абрикос абрикос",
            "тыква тыква тыква абрикос абрикос абрикос абрикос абрикос арбуз арбуз",
            "арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз",
            "кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек"
        ]

        vectors, csim = self.a.get_duplicat_matrix(lemmatized_reviews)

        self.maxDiff = 1
        assert vectors.tolist() == [
            [10, 0, 0, 0],
            [10, 0, 0, 0],
            [7, 0, 0, 3],
            [5, 2, 0, 3],
            [0, 10, 0, 0],
            [0, 0, 10, 0]
        ]

        csim = csim.round(1)
        assert csim.tolist() == [
            [1.0, 1.0, 0.9, 0.8, 0.0, 0.0],
            [1.0, 1.0, 0.9, 0.8, 0.0, 0.0],
            [0.9, 0.9, 1.0, 0.9, 0.0, 0.0],
            [0.8, 0.8, 0.9, 1.0, 0.3, 0.0],
            [0.0, 0.0, 0.0, 0.3, 1.0, 0.0],
            [0.0, 0.0, 0.0, 0.0, 0.0, 1.0]
        ]

        assert self.a.amount_unique_words == 4
        assert self.a.amount_words == 60

    def test_add_data(self):
        self.a.clear_data()
        data = [
            ["Ревью 1\n###\nРевью 2\n\n", "1", "AI1", "reviews_0_1"],
            ["Review 2\n###\nРевью 2 #%^🤗\n\t\t\\\n", "2", "AI2", "reviews_0_2"],
        ]
        self.a.add_data(data)
        review_list = ["Ревью 1", "###", "Ревью 2", "", "", "Review 2", "###", "Ревью 2 #%^🤗", "\t\t\\", ""]
        section_id_list = ["1", "1", "1", "1", "1", "2", "2", "2", "2", "2"]
        type_page_list = ["AI1", "AI1", "AI1", "AI1", "AI1", "AI2", "AI2", "AI2", "AI2", "AI2"]
        type_model_list = ["reviews_0_1", "reviews_0_1", "reviews_0_1", "reviews_0_1", "reviews_0_1",
                           "reviews_0_2", "reviews_0_2", "reviews_0_2", "reviews_0_2", "reviews_0_2"]

        assert self.a.data['review'].values.tolist() == review_list
        assert self.a.data['sectionId'].values.tolist() == section_id_list
        assert self.a.data['type_page'].values.tolist() == type_page_list
        assert self.a.data['type_model'].values.tolist() == type_model_list

    def test_clear_data(self):
        data = [
            ["Ревью 1\n###\nРевью 2\n\n", "1", "AI1", "reviews_0_1"],
            ["Review 2\n###\nРевью 2 #%^🤗\n\t\t\\\n", "2", "AI2", "reviews_0_2"],
        ]
        self.a.add_data(data)
        self.a.clear_data()

        assert self.a.amount_unique_words == 0
        assert self.a.amount_words == 0
        assert len(self.a.data.index) == 0

    def test_mark_name_entity(self):
        self.a.clear_data()
        data = [
            ["абрикос абрикос Алина абрикос абрикос абрикос абрикос абрикос абрикос абрикос", "", "", ""],
            ["абрикос абрикос абрикос абрикос картофель абрикос. Абрикос абрикос абрикос абрикос", "", "", ""],
            ["тыква тыква тыква абрикос абрикос. Печень абрикос абрикос абрикос абрикос", "", "", ""],
            ["тыква тыква тыква абрикос абрикос абрикос абрикос абрикос арбуз арбуз", "", "", ""],
            ["арбуз арбуз арбуз арбуз, Арбуз арбуз арбуз Аркадий арбуз арбуз", "", "", ""],
            ["кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек", "", "", ""],
        ]
        self.a.add_data(data)
        self.a.mark_name_entity()
        assert self.a.data['name_entity'].values.tolist() == [True, False, False, False, True, False]

    def test_mark_spelling(self):
        data = [
            [
                'Maria is a great tutor. She can hear everything and speak very '
                'well with her students, which means that she will always be clear '
                'well with her students, which means that she will always be clear '
                'well with her students, which means that she will always be clear '
                'well with her students, which means that she will always be clear '
                'well with her students, which means that she will always be clear '
                'of your wrongs in English language!', '', '', ''],
            ['В общем рекомендую этого преподавателя всем кто хочет подтянуть свой уровен', '', '', ''],
            [
                'Елена Владимировна - приятный в общении человек.Педагог помогает мне '
                'повысить уровень владения английским языком, использует много различных '
                'учебных и методических материалов на занятиях с ней по подготовке к '
                'ЕГЭ IELTS TOEFL c упором именно как раз-таки конкретно разговорной речи '
                '(чтение). Занятия проходят очень продуктивно! Упор идет больше не только '
                'лишь собственно непосредственно on line-, но также комбинированно '
                'используется аудиоуроками весь материал для занятий подобран '
                'квалифицированным специалистом весьма грамотно согласно моему запросу :)', '', '', ''],
            [
                'Khan Faisal - отличный преподаватель, мне с ним очень комфортно работать! '
                'Он помогает подтянуть уровень владения английским языком и в целом у меня '
                'положительный отзыв о его работе. У репетитора есть своя методика '
                'обучения английскому языку на основе бизнес-лексики по учебникам '
                'McDonalds или Tivari Rupa suite. В основном мы занимаемся разговорной '
                'практикой для расширения кругозора, но также много времени уделяем '
                'грамматике языка (грамматика нам не нужна). Если возникают какие либо '
                'вопросы связанные со здоровьем то я всегда обращаюсь к нему за помощью!', '', '', ''],
            [
                'Мне очень нравится заниматься с Еленой Игоревной. Она хорошо преподает '
                'английский язык, доступно и понятно объясняет материал по предмету! Я уже '
                'значительно лучше стала знать грамматику языка благодаря занятиям со '
                'специалистом-носителем английского. Елена - доброжелательный человек, '
                'который всегда идет навстречу моим пожеланиям в плане графика '
                'проведения занятий или их продолжительности (для меня это имеет '
                'значение).', '', '', '']
        ]
        self.a.clear_data()
        self.a.add_data(data)
        self.a.mark_spelling()
        spelling_list = [True, True, True, False, False]
        assert self.a.data['spelling'].values.tolist() == spelling_list

    def test_mark_duplicates_by_csim(self):
        self.a.clear_data()
        data = [
            ["абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос", "", "", ""],
            ["абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос", "", "", ""],
            ["тыква тыква тыква абрикос абрикос абрикос абрикос абрикос абрикос абрикос", "", "", ""],
            ["тыква тыква тыква абрикос абрикос абрикос абрикос абрикос арбуз арбуз", "", "", ""],
            ["арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз", "", "", ""],
            ["кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек", "", "", ""],
        ]
        self.a.add_data(data)
        self.a.duplicates_uniqueness = 0.9

        reviews_good = self.a.data['review']
        cleaned_reviews = list(map(self.a.clean_review, reviews_good.values))
        lemmatized_reviews = list(map(self.a.lemmatization_review, cleaned_reviews))

        vectors, csim = self.a.get_duplicat_matrix(lemmatized_reviews)
        self.a.mark_duplicates_by_csim(reviews_good, csim, vectors)

        duble_good = [False, False, False, True, True, True]
        assert self.a.data['duble_good'].values.tolist() == duble_good

    def test_mark_duplicates(self):
        self.a.clear_data()
        data = [
            ["абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос", "", "", ""],
            ["абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос", "", "", ""],
            ["тыква тыква тыква абрикос абрикос абрикос абрикос абрикос абрикос абрикос", "", "", ""],
            ["тыква тыква тыква абрикос абрикос абрикос абрикос абрикос арбуз арбуз", "", "", ""],
            ["арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз", "", "", ""],
            ["кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек", "", "", ""],
        ]
        self.a.add_data(data)
        self.a.duplicates_uniqueness = 0.9
        self.a.data['spelling'] = [False for _ in range(len(data))]
        self.a.mark_duplicates()

        duble_good = [False, False, False, True, True, True]
        assert self.a.data['duble_good'].values.tolist() == duble_good

    def test_mark_file_duplicates(self):
        data = [
            ["абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос", "", "", ""],
            ["абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос абрикос", "", "", ""],
            ["тыква тыква тыква абрикос абрикос абрикос абрикос абрикос абрикос абрикос", "", "", ""],
            ["тыква тыква тыква абрикос абрикос абрикос абрикос абрикос арбуз арбуз", "", "", ""],
            ["арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз арбуз", "", "", ""],
            ["кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек кабочек", "", "", ""],
        ]
        self.a.clear_data()
        self.a.add_data(data)
        self.a.duplicates_uniqueness = 0.9
        self.a.data['spelling'] = [False for _ in range(len(data))]
        self.a.mark_duplicates()
        self.a.mark_file_duplicates('Tests/test_duplicates.tsv')
        duble_good = [False, False, False, True, True, False]
        duble_file = [False, False, False, False, False, True]
        assert self.a.data['duble_file'].values.tolist() == duble_file
        assert self.a.data['duble_good'].values.tolist() == duble_good

    def test_delete_names_in_start(self):
        data = [
            [
                'Елена Владимировна - подошла полностью как со стороны профессиональных качеств так личностных '
                'характеристик преподавателя английского языка Елены Владимировны Багаевой к ребенку 5 класса '
                'начальной школы города Москвы.', '', '', ''
            ],
            [
                'John Alexander - отличный преподаватель английского языка. С ним интересно заниматься, он дает много '
                'информации по предмету грамотно строит уроки в зависимости от уровня ученика (грамматика или '
                'аудирование). Уроки проходят легко для восприятия на слух без лишних напоминаний о правилах '
                'грамматики!', '', '', ''],
            [
                'Отличный преподаватель, мне с ним очень комфортно работать! '
                'Он помогает подтянуть уровень владения английским языком и в целом у меня '
                'положительный отзыв о его работе. У репетитора есть своя методика '
                'обучения английскому языку на основе бизнес-лексики по учебникам '
                'McDonalds или Tivari Rupa suite. В основном мы занимаемся разговорной '
                'практикой для расширения кругозора, но также много времени уделяем '
                'грамматике языка (грамматика нам не нужна). Если возникают какие либо '
                'вопросы связанные со здоровьем то я всегда обращаюсь к нему за помощью!', '', '', ''
            ]
        ]
        clear_revievs = [
            'Подошла полностью как со стороны профессиональных качеств так личностных характеристик преподавателя '
            'английского языка Елены Владимировны Багаевой к ребенку 5 класса начальной школы города Москвы.',

            'Отличный преподаватель английского языка. С ним интересно заниматься, он дает много информации по '
            'предмету грамотно строит уроки в зависимости от уровня ученика (грамматика или аудирование). '
            'Уроки проходят легко для восприятия на слух без лишних напоминаний о правилах грамматики!',

            'Отличный преподаватель, мне с ним очень комфортно работать! Он помогает подтянуть уровень владения '
            'английским языком и в целом у меня положительный отзыв о его работе. У репетитора есть своя методика '
            'обучения английскому языку на основе бизнес-лексики по учебникам McDonalds или Tivari Rupa suite. В '
            'основном мы занимаемся разговорной практикой для расширения кругозора, но также много времени уделяем '
            'грамматике языка (грамматика нам не нужна). Если возникают какие либо вопросы связанные со здоровьем то '
            'я всегда обращаюсь к нему за помощью!'
        ]
        self.a.clear_data()
        self.a.add_data(data)
        self.a.data['spelling'] = [False for _ in range(len(data))]
        self.a.delete_names_in_start()

        assert self.a.data['review'].to_list() == clear_revievs

    def test_get_names(self):
        # No names
        assert self.a.get_names('Мы довольны репетитором! Она хорошо обучает ребенка английскому языку. У нас есть '
                                'положительные результаты, ребенок стал лучше знать английский язык и понимать его на '
                                'слух - это главное для меня в обучении моего сына-третьеклассника (он учится во 2 '
                                'классе). Педагог очень пунктуальный человек с хорошим чувством юмора; всегда идет '
                                'нам навстречу по графику занятий или переносу уроков из одного дня недели не только '
                                'у нее дома но даже за ее пределами города Киева.') == {}
        # One russian name
        assert self.a.get_names('Мы очень довольны работой репетитора. У нас было всего несколько занятий, но за это '
                                'время ребенок стал увереннее в себе и повысил успеваемость по английскому языку до '
                                '"четверок". Татьяна Александровна - пунктуальный человек с хорошим чувством юмора! '
                                'Она всегда приходила на занятия вовремя без опозданий '
                                '(что для меня немаловажно).') == \
               {'Татьяна Александровна': [{'first': 'Татьяна', 'last': 'Александровна'}, 'Fem']}

        # Two names
        assert self.a.get_names('Я очень довольна Егором Александровичем. Она умеет найти подход к ребенку, интересно '
                                'и доступно излагает материал по английскому языку для подготовки в школе за 2 класс '
                                '(учитель - женщина). Уроки проходят регулярно с использованием различных методических '
                                'пособий на занятиях со Светланой Александровны я не присутствую но вижу что ребенок '
                                'занимается охотно!') == \
               {'Егор Александрович': [{'first': 'Егор', 'last': 'Александрович'}, 'Masc'],
                'Светлана Александровны': [{'first': 'Светлана', 'last': 'Александровны'}, 'Fem']}

    def test_equal_names(self):
        name1 = self.a.get_names('Могилевич Егор Александрович')
        name2 = self.a.get_names('Егор Александрович')
        assert self.a.equal_names(name1[list(name1.keys())[0]], name2[list(name2.keys())[0]]) is True

        name1 = self.a.get_names('Могилевич Егор Александрович')
        name2 = self.a.get_names('Егор Могилевич')
        assert self.a.equal_names(name1[list(name1.keys())[0]], name2[list(name2.keys())[0]]) is True

        name1 = self.a.get_names('Могилевич Егор Александрович')
        name2 = self.a.get_names('Могилевич Е. А.')
        assert self.a.equal_names(name1[list(name1.keys())[0]], name2[list(name2.keys())[0]]) is True

        name1 = self.a.get_names('Могилевич Егор')
        name2 = self.a.get_names('Егор Александрович')
        assert self.a.equal_names(name1[list(name1.keys())[0]], name2[list(name2.keys())[0]]) is True

        name1 = self.a.get_names('Светлана Б. А.')
        name2 = self.a.get_names('Светлана Мищук')
        assert self.a.equal_names(name1[list(name1.keys())[0]], name2[list(name2.keys())[0]]) is False

        name1 = self.a.get_names('Она Башина С. А.')
        name2 = self.a.get_names('Светлана Башина')
        assert self.a.equal_names(name1[list(name1.keys())[0]], name2[list(name2.keys())[0]]) is True

    def test_one_name_in_dict(self):
        # One name
        names = self.a.get_names('Мы очень довольны работой репетитора. У нас было всего несколько занятий, но за '
                                 'это время ребенок стал увереннее в себе и повысил успеваемость по английскому '
                                 'языку до "четверок". Татьяна Александровна - пунктуальный человек с хорошим '
                                 'чувством юмора! Она всегда приходила на занятия вовремя без опозданий (что для меня '
                                 'немаловажно).')

        assert self.a.one_name_in_dict(names) is True

        # Two equal names
        names = self.a.get_names('Я очень довольна Егором Александровичем. Она умеет найти подход к ребенку, '
                                 'интересно и доступно излагает материал по английскому языку для подготовки в школе '
                                 'за 2 класс (учитель - женщина). Уроки проходят регулярно с использованием '
                                 'различных методических пособий на занятиях с Егором Александровичем я не '
                                 'присутствую но вижу что ребенок занимается охотно!')
        assert self.a.one_name_in_dict(names) is True

        # Two different names
        names = self.a.get_names('Я очень довольна Егором Александровичем. Она умеет найти подход к ребенку, интересно '
                                 'и доступно излагает материал по английскому языку для подготовки в школе за 2 класс '
                                 '(учитель - женщина). Уроки проходят регулярно с использованием различных '
                                 'методических пособий на занятиях со Светланой Александровны я не присутствую но '
                                 'вижу что ребенок занимается охотно!')
        assert self.a.one_name_in_dict(names) is False

    def test_get_name_entity_details(self):
        assert self.a.get_name_entity_details('Мы очень довольны работой репетитора. У нас было всего несколько '
                                              'занятий, но за это время ребенок стал увереннее в себе и повысил '
                                              'успеваемость по английскому языку до "четверок". Татьяна Александровна '
                                              '- пунктуальный человек с хорошим чувством юмора! Она всегда приходила '
                                              'на занятия вовремя без опозданий (что для меня немаловажно).') ==\
               ('Татьяна Александровна', 'Fem')

        assert self.a.get_name_entity_details('Я очень довольна Егором Александровичем. Она умеет найти подход к '
                                              'ребенку, интересно и доступно излагает материал по английскому языку '
                                              'для подготовки в школе за 2 класс (учитель - женщина). Уроки проходят '
                                              'регулярно с использованием различных методических пособий на занятиях '
                                              'с Егором Александровичем я не присутствую но вижу что ребенок '
                                              'занимается охотно!') ==\
               ('Егор Александрович', 'Masc')

        assert self.a.get_name_entity_details('Я очень довольна Максимом Александровичем. Она умеет найти подход к '
                                              'ребенку, интересно и доступно излагает материал по английскому языку '
                                              'для подготовки в школе за 2 класс (учитель - женщина). Уроки проходят '
                                              'регулярно с использованием различных методических пособий на занятиях '
                                              'с Егором Александровичем я не присутствую но вижу что ребенок '
                                              'занимается охотно!') == \
               ('', '')

    def test_mark_name_entity_details(self):
        pass
